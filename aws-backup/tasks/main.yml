---
- name: 'Include only files matching country.yml'
  include_vars:
    dir: 'vars'
    files_matching: "{{ country }}.yml"

- name: 'Install Python PIP'
  yum:  name=python2-pip state=latest 
  when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7') or
        (ansible_distribution == 'Red Hat Enterprise Linux' and ansible_distribution_major_version == '7')

- name: 'Install AWS CLI'
  yum:  name=awscli state=latest
  when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '7') or
        (ansible_distribution == 'Red Hat Enterprise Linux' and ansible_distribution_major_version == '7')

- name: 'Install Python2.6'
  yum: name=python26 state=present
  when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '5') or
        (ansible_distribution == 'Red Hat Enterprise Linux' and ansible_distribution_major_version == '5')

- name: 'Dowload AWS-CLI zip file'
  get_url: url="https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" dest="/opt/awscli-bundle.zip" validate_certs=False
  when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '5') or
        (ansible_distribution == 'Red Hat Enterprise Linux' and ansible_distribution_major_version == '5')

- name: 'Extract AWS-CLI zip file under opt '
  unarchive: copy=no src=/opt/awscli-bundle.zip dest=/opt creates=/opt/awscli-bundle
  when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '5') or
        (ansible_distribution == 'Red Hat Enterprise Linux' and ansible_distribution_major_version == '5')

- name: 'Install AWS-CLI...'
  command: /usr/bin/python2.6 /opt/awscli-bundle/install -i /usr/local/aws -b /usr/bin/aws
  when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '5') or
        (ansible_distribution == 'Red Hat Enterprise Linux' and ansible_distribution_major_version == '5')

- name: 'Create the AWS config directory'
  file: >
    path=~{{ aws_cli_user }}/.aws
    state=directory
    owner={{ aws_cli_user }}
    group={{ aws_cli_user }}
    mode=0755

- name: 'Copy AWS CLI config'
  template: >
    src=aws_cli_config.j2
    dest=~{{ aws_cli_user }}/.aws/config
    owner={{ aws_cli_user }}
    group={{ aws_cli_user }}
    mode=0644

- name: 'Copy AWS CLI credentials'
  template: >
    src=aws_cli_credentials.j2
    dest=~{{ aws_cli_user }}/.aws/credentials
    owner={{ aws_cli_user }}
    group={{ aws_cli_user }}
    mode=0644

- name: 'Copy over files '
  copy: src={{ item }}  dest=~{{ aws_cli_user }}/.aws/ owner=root group=root mode="u+rw,g-wx,o-rwx"
  with_items:
    - get-pip.py
    - samlapi.py

- name: 'Install Python PIP CentOS 5...'
  command: /usr/bin/python26 /root/.aws/get-pip.py
  when: (ansible_distribution == 'CentOS' and ansible_distribution_major_version == '5') or
        (ansible_distribution == 'Red Hat Enterprise Linux' and ansible_distribution_major_version == '5')

- name: 'Install requested Python pkgs'
  pip: name={{ item }}
  with_items:
    - boto
    - beautifulsoup4
    - requests-ntlm

- name: Install duplicity files to backup on S3
  yum:  name={{ item }} state=latest
  with_items:
    - duplicity
    - duply
    - python-boto

- name: Create duply configuration 
  command: /usr/bin/duply {{ duply_profile }} create   

- name: 'Copy duplicity configuration file'
  template: >
    src=aws_cli_duply_conf.j2
    dest=/etc/duply/{{ duply_profile }}/conf
    owner={{ aws_cli_user }}
    group={{ aws_cli_user }}
    mode=0644

- name: 'Generate password for GPG encr and put in the .conf file'
  command: /usr/bin/openssl rand -base64 32 
  register: mypass

- lineinfile:
    destfile: /etc/duply/{{ duply_profile }}/conf
    regexp: '^#GPG_PW='
    line: 'GPG_PW="{{mypass.stdout}}"'
    backrefs: yes

- name: 'Copy over files to dinamically generate '
  copy: src=duply_plx_bkp.py dest=/etc/duply/duply_plx_bkp.py owner=root group=root mode="u+rw,g-wx,o-rwx"
#- debug:
#    #msg: "System {{ ansible_hostname }} name "
#    msg: "System {{ role_path }}/files/{{ country_code }}/{{ ansible_hostname }}-duply_plx_bkp_config.py  name "

- name: 'Copy files'
  copy: src="{{ role_path }}/files/{{ country_code }}/{{ ansible_hostname }}-duply_plx_bkp_config.py" dest="/etc/duply/{{ ansible_hostname }}-duply_plx_bkp_config.py" owner=root group=root mode="u+rw,g-wx,o-rwx"


- name: 'Scheduling backup window'
  cron:
    name: "Execute backup on S3"
    minute: "0"
    hour: "2"
    job: /etc/duply/duply_plx_bkp.py {{ duply_profile }} 2>&1 /var/log/wrapper.log 
